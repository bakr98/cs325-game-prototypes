// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.0 (Phaser v2.6.2)
/**
 * Bee
 * 
 * @param {Phaser.Game}
 *            aGame A reference to the currently running game.
 * @param {Number}
 *            aX The x coordinate (in world space) to position the Sprite at.
 * @param {Number}
 *            aY The y coordinate (in world space) to position the Sprite at.
 * @param {any}
 *            aKey This is the image or texture used by the Sprite during
 *            rendering. It can be a string which is a reference to the Cache
 *            entry, or an instance of a RenderTexture or PIXI.Texture.
 * @param {any}
 *            aFrame If this Sprite is using part of a sprite sheet or texture
 *            atlas you can specify the exact frame to use by giving a string or
 *            numeric index.
 */
function Bee(aGame, aX, aY, aKey, aFrame) {
	Phaser.Sprite.call(this, aGame, aX, aY, aKey || 'atlas',
			aFrame == undefined || aFrame == null ? 'bee/bee-1' : aFrame);
	this.anchor.setTo(0.5, 0.5);
	var _anim_fly = this.animations.add('fly', [ 'bee/bee-1', 'bee/bee-2',
			'bee/bee-3', 'bee/bee-4', 'bee/bee-5', 'bee/bee-6', 'bee/bee-7',
			'bee/bee-8' ], 15, true);
	_anim_fly.play();
	this.game.physics.arcade.enable(this);
	this.body.setSize(15.0, 18.0, 11.0, 13.0);

	this.afterCreate();

}

/** @type Phaser.Sprite */
var Bee_proto = Object.create(Phaser.Sprite.prototype);
Bee.prototype = Bee_proto;
Bee.prototype.constructor = Bee;

/* --- end generated code --- */

Bee.prototype.afterCreate = function() {
	this.initX = this.x;
	this.initY = this.y;
	this.speed = 40;
};

Bee.prototype.update = function() {
	if (this.body.velocity.x == 0 && this.body.velocity.y == 0) {
		if (this.data.horizontal) {
			this.body.velocity.x = this.speed;
			this.body.velocity.y = 0;
		} else {
			this.body.velocity.x = 0;
			this.body.velocity.y = this.speed;
		}
	}

	if (this.data.horizontal) {
		this.horizontalMove();
	} else {
		this.verticalMove();
	}
};

Bee.prototype.verticalMove = function() {
	var player = this.getPlayer();
	
	if (this.body.velocity.y > 0 && this.y > this.initY + this.data.distance) {
		this.body.velocity.y = -40;
	} else if (this.body.velocity.y < 0 && this.y < this.initY - this.data.distance) {
		this.body.velocity.y = 40;
	}
	
	if (this.x > player.x) {
		this.scale.x = 1;
	} else {
		this.scale.x = -1;
	}
};

Bee.prototype.horizontalMove = function() {
	if (this.body.velocity.x > 0 && this.x > this.initX + this.data.distance) {
		this.body.velocity.x = -40;
	} else if (this.body.velocity.x < 0 && this.x < this.initX - this.data.distance) {
		this.body.velocity.x = 40;
	}
	if (this.body.velocity.x < 0) {
		this.scale.x = 1;
	} else {
		this.scale.x = -1;
	}
};

/**
 * @returns {Player} the player
 */
Bee.prototype.getPlayer = function () {
	return this.game.state.getCurrentState().fPlayer;
};
