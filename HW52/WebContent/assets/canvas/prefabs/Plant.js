// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.0 (Phaser v2.6.2)

/**
 * Plant
 * 
 * @param {Phaser.Game}
 *            aGame A reference to the currently running game.
 * @param {Number}
 *            aX The x coordinate (in world space) to position the Sprite at.
 * @param {Number}
 *            aY The y coordinate (in world space) to position the Sprite at.
 * @param {any}
 *            aKey This is the image or texture used by the Sprite during
 *            rendering. It can be a string which is a reference to the Cache
 *            entry, or an instance of a RenderTexture or PIXI.Texture.
 * @param {any}
 *            aFrame If this Sprite is using part of a sprite sheet or texture
 *            atlas you can specify the exact frame to use by giving a string or
 *            numeric index.
 */
function Plant(aGame, aX, aY, aKey, aFrame) {
	Phaser.Sprite
			.call(
					this,
					aGame,
					aX,
					aY,
					aKey || 'atlas',
					aFrame == undefined || aFrame == null ? 'piranha-plant-attack/piranha-plant-attack-1'
							: aFrame);
	this.anchor.setTo(0.5, 0.5);
	this.animations.add('idle', [ 'piranha-plant/piranha-plant-1',
			'piranha-plant/piranha-plant-2', 'piranha-plant/piranha-plant-3',
			'piranha-plant/piranha-plant-4', 'piranha-plant/piranha-plant-5' ],
			10, true);
	this.animations.add('attack', [
			'piranha-plant-attack/piranha-plant-attack-1',
			'piranha-plant-attack/piranha-plant-attack-2',
			'piranha-plant-attack/piranha-plant-attack-3',
			'piranha-plant-attack/piranha-plant-attack-4' ], 10, true);
	this.game.physics.arcade.enable(this);
	this.body.setSize(61.0, 29.0, 0.0, 16.0);
	this.body.gravity.y = 500.0;

}

/** @type Phaser.Sprite */
var Plant_proto = Object.create(Phaser.Sprite.prototype);
Plant.prototype = Plant_proto;
Plant.prototype.constructor = Plant;

/* --- end generated code --- */



Plant.prototype.update = function() {
	
	var player = this.getPlayer();
	
	if (this.x > player.x) {
		this.scale.x = 1;
	} else {
		this.scale.x = -1;

	}

	var distance = this.game.physics.arcade.distanceBetween(this, player);

	if (distance < 65) {
		this.animations.play("attack");
	} else {
		this.animations.play("idle");
	}

};

/**
 * @returns {Player} the player
 */
Plant.prototype.getPlayer = function () {
	return this.game.state.getCurrentState().fPlayer;
};
